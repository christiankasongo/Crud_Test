@page "/"

@inject IDialogService DialogService
@inject HttpClient Http

<PageTitle>Pinewood DMS</PageTitle>
<div>
    @if (isLoading)
    {
        <div>
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                <MudText Typo="Typo.body1" Color="Color.Primary" Align="Align.Center">Loading...</MudText>
            </MudStack>
        </div>
    }

    @if (!isLoading && customers.Any())
    {
        <div>
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.End">
                <MudText Typo="Typo.h5" Align="Align.Left">Dashboard</MudText>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonAdd" Color="Color.Primary"
                           IconSize="Size.Small" Size="Size.Small" OnClick="OnNewCustomerButtonClick">New Customer</MudButton>
            </MudStack>
        </div>

        <div class="my-5">
            <MudGrid Spacing="2" Class="d-flex align-center">
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="rounded-lg">
                        <MudCardContent>
                            <MudStack Justify="Justify.SpaceBetween" Row="true" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Primary"
                                         Style="font-size: 2rem;" />
                                <div>
                                    <MudText Align="Align.Right" Class="text-lg font-medium text-primary">@customers.Count()</MudText>
                                    <MudText Typo="Typo.body1" Align="Align.Right" Class="text-secondary">
                                        Total Customers
                                    </MudText>
                                </div>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="rounded-lg">
                        <MudCardContent>
                            <MudStack Justify="Justify.SpaceBetween" Row="true" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.AssignmentInd" Color="Color.Success"
                                         Style="font-size: 2rem;" />
                                <div>
                                    <MudText Align="Align.Right" Class="text-lg font-medium text-primary">@customers.Where(x => x.Active).Count()</MudText>
                                    <MudText Typo="Typo.body1" Align="Align.Right" Class="text-secondary">
                                        Active Customers
                                    </MudText>
                                </div>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="rounded-lg">
                        <MudCardContent>
                            <MudStack Justify="Justify.SpaceBetween" Row="true" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.AssignmentInd" Color="Color.Dark"
                                         Style="font-size: 2rem;" />
                                <div>
                                    <MudText Align="Align.Right" Class="text-lg font-medium text-primary">@customers.Where(x => x.Active == false).Count()</MudText>
                                    <MudText Typo="Typo.body1" Align="Align.Right" Class="text-secondary">
                                        Inactive Customers
                                    </MudText>
                                </div>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </div>
        <div>

            <MudDataGrid Items="@customers" Filterable="false" SortMode="@SortMode.None" Groupable="false" QuickFilter="@_quickFilter" ColumnResizeMode="ResizeMode.Column" Elevation="2">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">List of Customers</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" FullWidth="false" Class="mt-0" />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Customer Id" Sortable="true" />
                    <PropertyColumn Property="x => x.FullName" Title="Full Name" Sortable="true" />
                    <PropertyColumn Property="x => x.Phone" Title="Phone No" />
                    <PropertyColumn Property="x => x.Email" Title="Email" />
                    <PropertyColumn Property="x => x.Address" Title="Address" />
                    <TemplateColumn Title="Status" Sortable="true" CellStyleFunc="@_cellStyleFunc">
                        <CellTemplate>
                            @if (context.Item.Active)
                            {
                                <span>Active</span>
                            }
                            else
                            {
                                <span>Inactive</span>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    @* <PropertyColumn Property="x => x.Active" Title="Status" Sortable="true" CellStyleFunc="@_cellStyleFunc" /> *@
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row="true">
                                <MudButton Class="normal-case font-normal" Variant="Variant.Filled" Size="Size.Small" OnClick="(() => ExpandCustomer(context.Item))">Expand</MudButton>
                                <MudButton Class="normal-case font-normal" Variant="Variant.Filled" Size="Size.Small" Color="Color.Tertiary" OnClick="(() => UpdateCustomer(context.Item))">Update</MudButton>
                                <MudButton Class="normal-case font-normal" Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="(() => DeleteCustomer(context.Item))">Remove</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Customer" />
                </PagerContent>
            </MudDataGrid>
        </div>
    }

</div>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>


@code {
    public bool isLoading;
    public Customer customer = new();
    private string _searchString;
    public List<Customer> customers = new();
    public Customer sltedCustomer;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await GetCustomers();
        await Task.Delay(2000);
        isLoading = false;
        StateHasChanged();
    }

    public async Task GetCustomers()
    {
        var customerList = await Http.GetFromJsonAsync<List<Customer>>("api/Customer");
        customers = customerList.OrderByDescending(x=>x.Id).ToList();
    }

    #region Data Grid styles and Functions

    private Func<Customer, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.LastName} {x.FullName} {x.Email} {x.Phone} {x.Address}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
    private Func<Customer, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.Active == true)
            style += "background-color:#D3FAD6";

        else if (x.Active == false)
            style += "background-color:#CFCFCD";

        return style;
    };

    #endregion

    #region CRUD

    public async Task OnNewCustomerButtonClick()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, ClassBackground = "my-custom-class" };
        var dialog = await DialogService.ShowAsync<FormComponent>("Add New Customer", options);

        var result = await dialog.Result;
        if(!result.Canceled)
        {
         await GetCustomers();
        }
        StateHasChanged();
    }

    public void ExpandCustomer(Customer customer)
    {
        sltedCustomer = customer;
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, ClassBackground = "my-custom-class" };
        var parameters = new DialogParameters<FormComponent>
            {{ x => x.customer, sltedCustomer}, { x => x.ModalType, "Expand"}};
        DialogService.Show<FormComponent>($"Customer {sltedCustomer.Id}", parameters, options);
    }
    public async Task UpdateCustomer(Customer customer)
    {
        sltedCustomer = customer;
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, ClassBackground = "my-custom-class" };
        var parameters = new DialogParameters<FormComponent>
            {{ x => x.customer, sltedCustomer}, { x => x.ModalType, "Edit"}};
        var dialog = await DialogService.ShowAsync<FormComponent>($"Update Customer {sltedCustomer.Id}", parameters, options);
            var result = await dialog.Result;
        if(!result.Canceled)
        {
            await GetCustomers();
        }
        StateHasChanged();
    }
    public async Task DeleteCustomer(Customer customer)
    {
        sltedCustomer = customer;
        var options = new DialogOptions() { ClassBackground = "my-custom-class" };

        var parameters = new DialogParameters<FormComponent>
            {{ x => x.customer, sltedCustomer}, { x => x.ModalType, "Delete"}};

        var dialog = await DialogService.ShowAsync<FormComponent>("Delete", parameters, options);
        var result = await dialog.Result;
        
        if(!result.Canceled)
        {
        customers.Remove(customers.Where(x=>x.Id == sltedCustomer.Id).First());
        }
        StateHasChanged();
    }

    #endregion


}